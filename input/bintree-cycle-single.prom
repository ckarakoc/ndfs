/* A binary tree of depth max, with accepting states at depth accept, and an accepting cycle at a single leaf */

int accept = 13; /* smaller or equal to max */
int max = 19; /* smaller or equal to 30 */

int single = (1 << max); /* can be any number >= 0 and < (1 << max), or there is no accepting cycle */
/* int single = 65536; /* can be any number >= 0 and < (1 << max), or there is no accepting cycle */
/* int single = (1 << max) - 1; /* can be any number >= 0 and < (1 << max), or there is no accepting cycle */

init {
	int d = 0; /* depth */
	int p = 0; /* position */

	do
	:: d < accept ->
		if
		:: p = p + (1 << d); d++
		:: d++
		fi
	:: else -> break
	od

	accept: skip;

	do
	:: d < max ->
		if
		:: p = p + (1 << d); d++
		:: d++
		fi
	:: else -> break
	od

	accept_leaf: if
	:: p == single  -> goto accept_leaf;
	fi
}
